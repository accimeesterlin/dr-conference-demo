type Post
  # @model(queries: null)
  @model
  @key(fields: ["teamId", "createdAt"])
  @key(
    name: "byStatusByUpdatedAtByTeamId"
    fields: ["status", "teamId", "updatedAt"]
    queryField: "postsByStatusByTeamIdByUpdatedAt"
  )
  @key(
    name: "byScheduleTime"
    fields: ["scheduleTime", "teamId"]
    queryField: "postsByScheduleTime"
  ) {
  id: ID!
  teamId: ID!
  createdAt: String!
  createdByField: ID
  createdBy: User @connection(fields: ["createdByField"])
  tone: String
  source: String!
  content: AWSJSON
  publishedAt: String
  publishedByField: ID
  publishedBy: User @connection(fields: ["publishedByField"])
  # the scheduleTime field is used by the scheduler to do publication on the lambda.
  scheduleTime: String
  scheduleAt: String
  scheduleByField: ID
  scheduleBy: User @connection(fields: ["scheduleByField"])
  updatedAt: String!
  updatedByField: ID
  updatedBy: User @connection(fields: ["updatedByField"])
  channelsContent: [AWSJSON]
  fb: AWSJSON
  twitter: AWSJSON
  wp: AWSJSON
  status: String
}

type TeamInvitation
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: owner, ownerField: "inviteeId", operations: [read] }
    ]
  )
  @key(name: "byInvitee", fields: ["invitee", "id"])
  @key(name: "byTeam", fields: ["teamId", "id"]) {
  id: ID!
  teamId: ID!
  sender: ID!

  invitee: ID!
  role: String!
  inviteeId: ID!

  status: String! # pending - accepted - rejected
  teamName: String!
}

# field level authorization to restrict access to user only @auth(rules: [{ allow: owner, ownerField: "owner"}])
# [{ allow: owner, ownerField: "owner", operations: [create, delete, update] }]
type User
  @model
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "owner"
        operations: [create, delete, update]
      }
    ]
  ) {
  id: ID!
  email: String!
  fullName: String
  avatar: String
  owner: ID!

  invitations: [TeamInvitation]
    @connection(keyName: "byInvitee", fields: ["owner"])
    @auth(rules: [{ allow: owner, ownerField: "owner" }])
  workingTeam: ID @auth(rules: [{ allow: owner, ownerField: "owner" }])
  notes: [String] @auth(rules: [{ allow: owner, ownerField: "owner" }])
}

type Team
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: owner, ownerField: "editors", operations: [read] }
    ]
  ) {
  id: ID!
  name: String!
  ownerEmail: String!
  description: String

  editors: [String]
  editorsEmail: [String]

  publicationUrl: String
    @auth(rules: [{ allow: owner, operations: [update, delete] }])
  newsapiKey: String
    @auth(rules: [{ allow: owner, operations: [update, delete] }])

  posts: [Post] @connection(fields: ["id"])
  invitations: [TeamInvitation] @connection(keyName: "byTeam", fields: ["id"])

  channels: [AWSJSON]
  activeChannels: [String]
  timeZone: String
}

type Query {
  userSubIdentity(email: String!): String
    @function(name: "getusersubLetra-${env}")
  manageInvitation(action: String!, invitationId: String!): String
    @function(name: "manageInvitationLetra-${env}")
  newsapiSearch(params: String!): String
    @function(name: "newsapiSearchLetra-${env}")
  getGPT3Text(text: String!): String @function(name: "getGPT3TextLetra-${env}")
  postSchedulerLetra(
    action: String!
    teamId: String!
    createdAt: String!
    userEmail: String!
  ): String @function(name: "postSchedulerLetra-${env}")
}
